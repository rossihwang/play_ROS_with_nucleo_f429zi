/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_ENCODER_PB_H_INCLUDED
#define PB_ENCODER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Encoder_Direction {
    Encoder_Direction_CLOCKWISE = 0,
    Encoder_Direction_ANTI_CLOCKWISE = 1
} Encoder_Direction;

/* Struct definitions */
typedef struct _Encoder {
    uint32_t lcounter;
    Encoder_Direction ldir;
    uint32_t rcounter;
    Encoder_Direction rdir;
} Encoder;


/* Helper constants for enums */
#define _Encoder_Direction_MIN Encoder_Direction_CLOCKWISE
#define _Encoder_Direction_MAX Encoder_Direction_ANTI_CLOCKWISE
#define _Encoder_Direction_ARRAYSIZE ((Encoder_Direction)(Encoder_Direction_ANTI_CLOCKWISE+1))


/* Initializer values for message structs */
#define Encoder_init_default                     {0, _Encoder_Direction_MIN, 0, _Encoder_Direction_MIN}
#define Encoder_init_zero                        {0, _Encoder_Direction_MIN, 0, _Encoder_Direction_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define Encoder_lcounter_tag                     1
#define Encoder_ldir_tag                         2
#define Encoder_rcounter_tag                     3
#define Encoder_rdir_tag                         4

/* Struct field encoding specification for nanopb */
#define Encoder_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   lcounter,          1) \
X(a, STATIC,   SINGULAR, UENUM,    ldir,              2) \
X(a, STATIC,   SINGULAR, UINT32,   rcounter,          3) \
X(a, STATIC,   SINGULAR, UENUM,    rdir,              4)
#define Encoder_CALLBACK NULL
#define Encoder_DEFAULT NULL

extern const pb_msgdesc_t Encoder_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Encoder_fields &Encoder_msg

/* Maximum encoded size of messages (where known) */
#define Encoder_size                             16

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
